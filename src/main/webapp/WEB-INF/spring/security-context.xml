<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- 패스워드 인코더 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- 로그인 생성 시 동작하는 핸들러 객체 생성 -->
	<bean id="customLoginSuccessHandler" class="com.company.handler.CustomLoginSuccessHandler"/>
	
	<!-- http로 들어오는 요청에 대하 접근 통제를 위한 필터 기록 -->
		<!-- 
			/security/all => 모든 사람 접근 가능
			/security/member => 로그인 사용자 접근 가능
			/security/admin => 관리자 접근 가능
		 -->
	<security:http>
		<security:intercept-url pattern="/security/all" access="permitAll"/>
		<security:intercept-url pattern="/security/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/security/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- 권한이 없는 사용자가 접근이 제한된 URI에 접근하는 경우 동작 
		     default 상태 : 403 페이지 보여줌, 관리자가 원하는 페이지로 이동하기
		-->
		<security:access-denied-handler error-page="/accessError"/>
		
		<!-- 사용자가 원하는 로그인 폼을 띄우기 위해 login-page 옵션 사용 -->
		<security:form-login login-page="/security/login" authentication-success-handler-ref="customLoginSuccessHandler"/>
		<!-- 시큐리티가 제공하는 기본 로그아웃 : 성공하면 로그인 페이지로 이동되고 logout 파라메터 따라감 -->
		<!-- <security:logout/> -->
		<security:logout invalidate-session="true" logout-success-url="/"/>
	</security:http>

	<!-- 인증을 어떤 방식으로 할 것인지 기록 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<!-- <security:user-service>user인증을 in-memory방식으로 진행(연습용)
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER,ROLE_ADMIN"/>
			</security:user-service> -->
			<!-- users에 담을 수 있는 값 : userid, userpw, enabled -->
			<!-- 
			회원 관리
			등급들 : 
			ROLE_MEMBER => user0~79
			ROLE_MANAGER => manager80~89
			ROLE_ADMIN => admin90~99
			 -->
			<security:jdbc-user-service
			data-source-ref="ds" users-by-username-query="select userid, userpw, enabled from spring_member where userid=?"
			authorities-by-username-query="select * from spring_member_auth where userid=?"/>
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
